name: Checks
on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
jobs:
  run_linters:
    name: Run Linters
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          ref: master
      - name: Python setup
        uses: actions/setup-python@v1
        with:
          python-version: "3.9"
      - uses: actions/checkout@v2
      - name: Setup cache
        id: cache-spacemandmm
        uses: actions/cache@v2
        with:
          path: ~/dreamchecker
          key: ${{ runner.os }}-spacemandmm-cache-${{ hashFiles('dependencies.sh') }}
      - name: Install SpacemanDMM
        if: steps.cache-spacemandmm.outputs.cache-hit != 'true'
        run: bash tools/ci/install_spaceman_dmm.sh dreamchecker
      - name: Install Tools
        run: |
          pip install setuptools
          bash tools/ci/install_node.sh
          bash tools/ci/install_spaceman_dmm.sh dreamchecker
          bash tools/ci/install_auxmos.sh
          tools/bootstrap/python -c ''
      - name: Check line endings
        uses: AODocs/check-eol@v1.1
      - name: Run Linters
        run: |
          bash tools/ci/check_filedirs.sh shiptest.dme
          bash tools/ci/check_changelogs.sh
          find . -name "*.php" -print0 | xargs -0 -n1 php -l
          find . -name "*.json" -not -path "*/node_modules/*" -print0 | xargs -0 tools/bootstrap/python ./tools/json_verifier.py
          tgui/bin/tgui --lint
          bash tools/ci/check_grep.sh
          tools/bootstrap/python -m ci.check_regex --log-changes-only
          tools/bootstrap/python -m dmi.test
          tools/bootstrap/python -m mapmerge2.dmm_test
          ~/dreamchecker > ${GITHUB_WORKSPACE}/output-annotations.txt 2>&1
      - name: Annotate Regex Matches
        if: always()
        run: |
          cat check_regex_output.txt
      - name: Annotate Lints
        uses: yogstation13/DreamAnnotate@v1
        if: always()
        with:
          outputFile: output-annotations.txt

  compile_all_maps:
    name: Compile Maps
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Python setup
        uses: actions/setup-python@v1
        with:
          python-version: "3.9"
      - name: Setup cache
        id: cache-byond
        uses: actions/cache@v2
        with:
          path: ~/BYOND
          key: ${{ runner.os }}-byond-cache-${{ hashFiles('Dockerfile') }}
      - name: Install BYOND
        if: steps.cache-byond.outputs.cache-hit != 'true'
        run: bash tools/ci/install_byond.sh
      - name: Compile All Maps
        run: |
          source $HOME/BYOND/byond/bin/byondsetup
          tools/bootstrap/python tools/ci/template_dm_generator.py
          tgui/bin/tgui --build
          bash tools/ci/dm.sh -DCIBUILDING -DCITESTING -DALL_MAPS shiptest.dme

  run_all_tests:
    name: Integration Tests
    runs-on: ubuntu-20.04
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v2
      - name: Setup cache
        id: cache-byond
        uses: actions/cache@v2
        with:
          path: ~/BYOND
          key: ${{ runner.os }}-byond-cache-${{ hashFiles('Dockerfile') }}
      - name: Install BYOND
        if: steps.cache-byond.outputs.cache-hit != 'true'
        run: bash tools/ci/install_byond.sh
      - name: Setup database
        run: |
          sudo systemctl start mysql
          mysql -u root -proot -e 'CREATE DATABASE tg_ci;'
          mysql -u root -proot tg_ci < SQL/tgstation_schema.sql
          mysql -u root -proot -e 'CREATE DATABASE tg_ci_prefixed;'
          mysql -u root -proot tg_ci_prefixed < SQL/tgstation_schema_prefixed.sql
      - name: Install rust-g
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update || true
          sudo apt install -o APT::Immediate-Configure=false libssl1.1:i386
          bash tools/ci/install_rust_g.sh
      - name: Install auxmos
        run: |
          bash tools/ci/install_auxmos.sh
      - name: Compile and run tests
        run: |
          source $HOME/BYOND/byond/bin/byondsetup
          tgui/bin/tgui --build
          bash tools/ci/dm.sh -DCIBUILDING shiptest.dme
          bash tools/ci/run_server.sh

  test_windows:
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    name: Windows Build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Compile
        run: pwsh tools/ci/build.ps1
      - name: Create artifact
        run: |
          md deploy
          bash tools/deploy.sh ./deploy
      - name: Deploy artifact
        uses: actions/upload-artifact@v2
        with:
          name: deploy
          path: deploy
